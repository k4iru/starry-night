{"version":3,"sources":["components/Forecast.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Forecast","_ref","moonStyle","moonMessage","visStyle","visMessage","cloudStyle","cloudMessage","time","value","moonPhase","visibility","cloudCover","react_default","a","createElement","className","colspan","Array","Date","getDay","list","Search","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","activeSuggestion","filteredSuggestions","showSuggestions","userInput","handleSubmit","bind","assertThisInitialized","onChange","onClick","_onFocus","_onBlur","e","onSearchChange","currentTarget","suggestions","filter","suggestion","toLowerCase","indexOf","setState","innerText","_this2","setTimeout","onSubmitChange","suggestionsListComponent","_this3","isLoading","length","map","index","key","id","react","type","onFocus","onBlur","Button_default","variant","disabled","Spinner_default","animation","role","size","React","Component","defaultProps","App","messagesEnd","createRef","response","search","searchHandler","submitHandler","console","log","fetch","concat","then","res","json","data","err","Error","scrollIntoView","behavior","preventDefault","forecast","components_Forecast","Container_default","components_Search","ref","el","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ed2d22ed.chunk.js","sourcesContent":["import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport '../styles/Forecast.css';\n\nfunction convertDate(time) {\n\n    let  weekday = new Array(\"sunday\", \"monday\", \"tuesday\", \"wednesday\",\n        \"thursday\", \"friday\", \"saturday\");\n\n    // unix timestamp from api is in seconds, Date function takes time in milliseconds\n    let date = new Date(time * 1000);\n    return weekday[date.getDay()];\n}\n\nfunction Forecast({value}) {\n\n    let moonStyle;\n    let moonMessage;\n    let visStyle;\n    let visMessage;\n    let cloudStyle;\n    let cloudMessage;\n\n    if(value.moonPhase < 0.25) {moonStyle = \"bad center-text\"; moonMessage = \"BAD\";}\n    if(value.moonPhase < 0.50) {moonStyle = \"poor center-text\"; moonMessage = \"poor\";}\n    if(value.moonPhase < 0.75) {moonStyle = \"good center-text\"; moonMessage = \"good\";}\n    else {moonStyle = \"peak\"; moonMessage=\"PEAK\";}\n\n    if(value.visibility < 0.25) {visStyle = \"bad center-text\"; visMessage = \"BAD\";}\n    if(value.visibility < 0.50) {visStyle = \"poor center-text\"; visMessage = \"poor\";}\n    if(value.visibility < 0.75) {visStyle = \"good center-text\"; visMessage = \"good\";}\n    else {visStyle = \"peak center-text\"; visMessage=\"PEAK\";}\n    \n    if(value.cloudCover < 0.25) {cloudStyle = \"peak center-text\"; cloudMessage = \"PEAK\";}\n    if(value.cloudCover < 0.50) {cloudStyle = \"good center-text\"; cloudMessage = \"good\";}\n    if(value.cloudCover < 0.75) {cloudStyle = \"poor center-text\"; cloudMessage = \"poor\";}\n    else {cloudStyle = \"bad center-text\"; cloudMessage=\"BAD\";}\n\n    return (\n        <table className=\"forecast\">\n            <tr className=\"weekday\">\n                <th colspan=\"2\" className=\"day\">\n                    {convertDate(value.time)}\n                </th>\n            </tr>\n            <tr>\n                <td className=\"title\">\n                    Moon Phase\n                </td>\n                <td className={moonStyle}>\n                    {moonMessage}\n                </td>\n            </tr>\n            <tr>\n                <td className=\"title\">\n                    Visibility\n                </td>\n                <td className={visStyle}>\n                    {visMessage}\n                </td>\n            </tr>\n            <tr>\n                <td className=\"title\">\n                Cloud Cover\n                </td>\n                <td className={cloudStyle}>\n                    {cloudMessage}\n                </td>\n            </tr>\n        </table>\n    )\n};\n\nexport default Forecast;\n","import React, { Component, Fragment }from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Popover from 'react-bootstrap/Popover';\nimport '../styles/Search.css';\n\nconst list = \n    [\n        \"Torrance Barrens Dark Sky Preserve\",\n        \"McDonald Park\",\n        \"Cypress Hills Inter-Provincial Park\",\n        \"Point Pelee National Park\",\n        \"Beaver Hills Dark Sky Preserve\"\n    ]\n\nclass Search extends React.Component {\n\n    static propTypes = {\n        suggestions: PropTypes.instanceOf(Array)\n    };\n\n    static defaultProps = {\n        suggestions: []\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeSuggestion: 0,\n            filteredSuggestions: [],\n            showSuggestions: false,\n            userInput: \"\"\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this._onFocus = this._onFocus.bind(this);\n        this._onBlur = this._onBlur.bind(this);\n    }\n\n    onChange(e) {\n        this.props.onSearchChange(e.currentTarget.value);\n        const suggestions = list;\n        const userInput = e.currentTarget.value;\n\n        const filteredSuggestions = suggestions.filter( suggestion =>\n            suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n        );\n\n        this.setState({\n            activeSuggestion: 0,\n            filteredSuggestions,\n            showSuggestions: true,\n            userInput: e.currentTarget.value\n        });\n    };\n\n    onClick(e) {\n        this.props.onSearchChange(e.currentTarget.innerText);\n        this.setState({\n            activeSuggestion: 0,\n            filteredSuggestions: [],\n            showSuggestions: false,\n            userInput: e.currentTarget.innerText\n        });\n    }\n\n    _onFocus() {\n        if (!this.state.showSuggestions) {\n            this.setState({\n                showSuggestions: true\n            });\n        }\n    }\n\n    _onBlur() {\n        setTimeout(() => {\n            if (this.state.showSuggestions) {\n                this.setState({\n                    showSuggestions: false\n                });\n            }\n        }, 0);\n    }\n\n    handleSubmit(e) {\n        this.props.onSubmitChange(e);\n    }\n\n    render() {\n\n        let suggestionsListComponent;\n        let isLoading = this.props.isLoading;\n\n        if (this.state.showSuggestions && this.state.userInput) {\n            if(this.state.filteredSuggestions.length) {\n                suggestionsListComponent = (\n                    <ul className=\"suggestions\">\n                        {this.state.filteredSuggestions.map((suggestion, index) => {\n                            let className;\n\n                            if (index === this.state.activeSuggestion) {\n                                className = \"suggestion-active\";\n                            }\n\n                            return (\n                                <li \n                                    className=\"suggestion-item\"\n                                    key={suggestion}\n                                    onClick={this.onClick}\n                                >\n                                    {suggestion}\n                                </li>\n                            );\n                        })}\n                    </ul>\n                );\n            } else {\n                suggestionsListComponent = (\n                    <div className=\"no-suggestions\">\n                        <em>No suggestions</em>\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <div id=\"search-form\">\n                <Fragment>\n                    <input className=\"search-field\"\n                        type=\"text\"\n                        onChange={this.onChange}\n                        value={this.state.userInput}\n                        onFocus={this._onFocus}\n                        onBlur={this._onBlur}\n                    />\n                    {suggestionsListComponent}\n                </Fragment>\n                <Button \n                    className=\"button\"\n                    variant=\"dark\"\n                    disabled={isLoading}\n                    onClick={!isLoading ? this.handleSubmit : null}\n                >{isLoading ? \n                        <Spinner \n                            animation=\"border\" \n                            role=\"status\"\n                            size=\"sm\" /> : 'Search'}\n                    </Button>\n                </div>\n        )\n    }\n};\n\nexport default Search;\n","import React from 'react';\n//import logo from './logo.svg';\n//import Header from './components/Header';\n//import Footer from './components/Footer';\nimport Forecast from './components/Forecast';\nimport Search from './components/Search';\nimport Container from 'react-bootstrap/Container';\nimport './App.css';\n\n\nclass App extends React.Component {\n\n    // reference for smooth scrolling\n    messagesEnd = React.createRef();\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            response: null, \n            search: '',\n            isLoading: false\n        };\n        this.searchHandler = this.searchHandler.bind(this);\n        this.submitHandler = this.submitHandler.bind(this);\n    }\n\n    searchHandler(e) {\n\n        // update search field as input is typed \n        this.setState({\n            search: e\n        })\n    }\n\n    submitHandler(e) {\n        //\n        // Search Button has been clicked, set loading to true and perform \n        // api call. parse data and smooth scroll to results\n        //\n\n        this.setState({isLoading: true}, () => {\n            console.log(this.state.search);\n            fetch(`/call?location=${this.state.search}` )\n                .then(res => res.json())\n                .then(\n                    (json) => {\n                        this.setState({\n                            response: json.data\n                        });\n                        console.log(\"testing fetch api\");\n                        console.log(this.state.response);\n                    },\n                    (err) => {\n                        Error(err)\n                    }\n                )\n                .then(() => {\n                    this.setState({ isLoading: false });\n                    // only scroll down if search isn't empty \n                    if (this.state.search) {\n                        this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n                    }\n                })\n        });\n\n        // prevent the browser from refreshing on search \n        e.preventDefault();\n\n    }\n\n    componentDidMount() {\n    }\n\n    componentWillUnmount() {\n    }\n\n    render() {\n        let forecast;\n        if (this.state.response !== null){\n            forecast = (\n\n                <div className=\"flex-container\">\n\n                    <h1 className=\"searched\">{this.state.search}</h1>\n                    <Forecast value={this.state.response[0]} />\n                    <Forecast value={this.state.response[1]} />\n                    <Forecast value={this.state.response[2]} />\n                    <Forecast value={this.state.response[3]} />\n                </div>\n            )\n        }\n        return (\n            <div className=\"App\">\n                {/* first view */}\n                <Container className=\"first-view\">\n                    <div className=\"spacer\" />\n                    <Search \n                        onSearchChange={this.searchHandler} \n                        onSubmitChange={this.submitHandler}\n                        isLoading={this.state.isLoading}\n                    />\n                </Container>\n\n                <Container className=\"second-view\">\n                    <div ref={(el) => {this.messagesEnd = el; }} ></div>\n                    {forecast}\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}